from aiogram import Router, F
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import Message, CallbackQuery
from asyncio import sleep
from sqlalchemy import select
from bot.database import SessionLocal
from bot.models import User
from bot.dice_check import get_score_change, get_combo_parts
from bot.keyboards import get_spin_keyboard

router = Router()

@router.message(F.text.lower().contains("–∫—Ä—É—Ç–∏—Ç—å"))
async def handle_spin_text(message: Message):
    await handle_spin(message)

@router.callback_query(F.data == "spin")
async def handle_spin_button(call: CallbackQuery):
    await handle_spin(call.message)
    await call.answer()

async def handle_spin(message: Message):
    user_id = message.from_user.id
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        if not user:
            user = User(user_id=user_id)
            session.add(user)
            await session.commit()

        if user.score < 30:
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å ‚≠ê")
            return

        user.score -= 30
        user.spins += 1
        await session.commit()

        dice_msg = await message.answer_dice(emoji=DiceEmoji.SLOT_MACHINE)
        await sleep(2.0)

        value = dice_msg.dice.value
        score_change = get_score_change(value)

        if score_change > 0:
            user.score += score_change
            user.loss_streak = 0
            result_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {score_change} –º–æ–Ω–µ—Ç!"
        else:
            user.loss_streak += 1
            result_text = "üò¢ –ù–µ –ø–æ–≤–µ–∑–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë!"
            if user.loss_streak >= 5:
                user.score += 10
                result_text += " –ë–æ–Ω—É—Å: +10 –º–æ–Ω–µ—Ç –∑–∞ —Å–µ—Ä–∏—é –Ω–µ—É–¥–∞—á üéÅ"
                user.loss_streak = 0

        await session.commit()

        combo = " | ".join(get_combo_parts(value))
        await message.answer(
            f"üé∞ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {combo}

{result_text}
üí∞ –ë–∞–ª–∞–Ω—Å: {user.score} –º–æ–Ω–µ—Ç",
            reply_markup=get_spin_keyboard()
        )
