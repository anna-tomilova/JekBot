
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import sqlite3, random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    coins INTEGER DEFAULT 1000,
    spins INTEGER DEFAULT 0,
    loss_streak INTEGER DEFAULT 0
)
""")
conn.commit()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id):
    cursor.execute("""
        INSERT OR IGNORE INTO users (user_id) VALUES (?)
    """, (user_id,))
    conn.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user_data(user_id):
    cursor.execute("SELECT coins, spins, loss_streak FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def update_user_data(user_id, coins, spins, loss_streak):
    cursor.execute("""
        UPDATE users SET coins = ?, spins = ?, loss_streak = ? WHERE user_id = ?
    """, (coins, spins, loss_streak, user_id))
    conn.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(spin_cost):
    buttons = [
        [InlineKeyboardButton(f"üé∞ –ö—Ä—É—Ç–∏—Ç—å –¥–∂–µ–∫–ø–æ—Ç ({spin_cost} –º–æ–Ω–µ—Ç)", callback_data="spin")],
        [InlineKeyboardButton("üíµ –ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∑–∞ –∑–≤–µ–∑–¥—ã", callback_data="buy")]
    ]
    return InlineKeyboardMarkup(buttons)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    register_user(user_id)
    coins, spins, _ = get_user_data(user_id)
    spin_cost = 30 + (spins // 10) * 10
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–∂–µ–∫–ø–æ—Ç –ë–æ—Ç! üí∞\n–£ –≤–∞—Å {coins} –º–æ–Ω–µ—Ç.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {spin_cost} –º–æ–Ω–µ—Ç.",
        reply_markup=main_menu(spin_cost)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    register_user(user_id)
    coins, spins, loss_streak = get_user_data(user_id)
    spin_cost = 30 + (spins // 10) * 10

    if query.data == "spin":
        await query.message.reply_text("üé∞")  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ—Ç–∞

        if coins < spin_cost:
            await query.answer()
            await query.edit_message_text(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫—É–ø–∏—Ç—å –∏—Ö –∑–∞ –∑–≤–µ–∑–¥—ã.",
                reply_markup=main_menu(spin_cost)
            )
        else:
            coins -= spin_cost
            spins += 1

            is_jackpot = random.random() < 0.05  # 5% —à–∞–Ω—Å
            if is_jackpot:
                coins += 300
                result = "üéâ –î–∂–µ–∫–ø–æ—Ç!"
                loss_streak = 0
            else:
                result = random.choice(["üíÄ –ù–µ –ø–æ–≤–µ–∑–ª–æ", "üçÄ –ü–æ—á—Ç–∏!"])
                loss_streak += 1

                if loss_streak >= 5:
                    coins += 10
                    result += "\nüî• –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π: +10 –º–æ–Ω–µ—Ç!"
                    loss_streak = 0

            update_user_data(user_id, coins, spins, loss_streak)
            spin_cost = 30 + (spins // 10) * 10

            await query.answer()
            await query.edit_message_text(
                f"{result}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {coins} –º–æ–Ω–µ—Ç.\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {spin_cost} –º–æ–Ω–µ—Ç.",
                reply_markup=main_menu(spin_cost)
            )

    elif query.data == "buy":
        await query.answer()
        await query.edit_message_text(
            "üîî –ü–æ–∫—É–ø–∫–∞ –∑–∞ Telegram-–∑–≤–µ–∑–¥—ã –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É Telegram Stars.",
            reply_markup=main_menu(spin_cost)
        )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token("–í–ê–®_–¢–û–ö–ï–ù_–û–¢_BOTFATHER").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.run_polling()
